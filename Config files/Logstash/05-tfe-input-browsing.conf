input {
 udp {
  port => 5962
  codec => plain { charset => "UTF-8" }
  type => "URLEvent"
 }
}

filter {
 if [type] == "URLEvent" {
  grok {
   break_on_match => false
   match => { 
    message => "(?m)%{TIMESTAMP_ISO8601:sourceTimestamp} %{IPORHOST:hostPrivateIP} %{WORD:computerName}\\%{WORD:userName} %{WORD:agentId} %{WORD:eventType} - a: %{GREEDYDATA:browserID_b64} b: %{GREEDYDATA:visitedURL_b64}"
   }
  }
  ruby {
   code => '
	require "base64"
        require "openssl"
	   
	def Decrypt(encrypted_data, key, iv, cipher_type)
         encrypted_data.gsub!("-","+")
	 encrypted_data.gsub!("_","/")
	 encrypted_data = Base64.decode64(encrypted_data)
         encrypted_data = encrypted_data.ljust((encrypted_data.size / 16.0).ceil * 16, "\0")
	 aes = OpenSSL::Cipher::Cipher.new(cipher_type)
    	 aes.decrypt
         aes.key = key
         aes.iv = iv
         return aes.update(encrypted_data) + aes.final  
	end
        
   	event["browserID"] = Decrypt(event["browserID_b64"], "1uBu8ycVugDIJz61", "1uBu8ycVugDIJz61", "aes-128-cbc")
	event["visitedURL"] = Decrypt(event["visitedURL_b64"], "1uBu8ycVugDIJz61", "1uBu8ycVugDIJz61", "aes-128-cbc")
        '
  }
  mutate {
   remove_field => [ "browserID_b64" ]
   remove_field => [ "visitedURL_b64" ]
  }
 }
}

output {
 if [type] == "URLEvent" {
  elasticsearch {
   index => "logstash-thefraudexplorer-url-%{+YYYY.MM.dd}"
   hosts => "localhost"
  }
 }
}
